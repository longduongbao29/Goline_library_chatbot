version: '3.8'

services:
  goline-chatbot-backend:
    image: goline-chatbot-backend:latest
    container_name: goline-chatbot-backend
    ports:
      - "${CHATBOT_BACKEND_PORT}:${BACKEND_INTERNAL_PORT}"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
      - POSTGRES_INTERNAL_PORT=${POSTGRES_INTERNAL_PORT}
      - ENVIRONMENT=${ENVIRONMENT}
      - LOG_LEVEL=${LOG_LEVEL}
      - LLM_PROVIDER=${LLM_PROVIDER}
      - TEMPERATURE=${TEMPERATURE}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL=${GROQ_MODEL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MODEL=${LLM_MODEL}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres_db
    depends_on:
      postgres_db:
        condition: service_healthy
    networks:
      - chatbot_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5).raise_for_status()"]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: ${BACKEND_START_PERIOD}

  goline-chatbot-ui:
    image: goline-chatbot-ui:latest
    container_name: goline-chatbot-ui
    ports:
      - "${CHATBOT_UI_PORT}:${UI_INTERNAL_PORT}"
    depends_on:
      goline-chatbot-backend:
        condition: service_healthy
    networks:
      - chatbot_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: ${UI_START_PERIOD}

  postgres_db:
    image: postgres:15
    container_name: postgres_db
    ports:
      - "${POSTGRES_DB_PORT}:${POSTGRES_INTERNAL_PORT}"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chatbot_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: ${DB_START_PERIOD}
  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "1237:8080"
    depends_on:
      postgres_db:
        condition: service_healthy
    networks:
      - chatbot_net
    restart: unless-stopped
networks:
  chatbot_net:
    driver: bridge
    name: ${NETWORK_NAME}
